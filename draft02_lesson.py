# -*- coding: utf-8 -*-

# !pip install tiktoken langchain openai chromadb gspread oauth2client nltk pydantic == 1.10.8

class draft02_lesson():
    def __init__(self):
        pass

    def run(self, msg):
        """2 занятие | Нейро-контроль качества | Дообучение chatGPT| Гарант

        Automatically generated by Colaboratory.

        Original file is located at
            https://colab.research.google.com/drive/1IQLIKbMHluMu8p-ug_Fv3-iNqBYSjIU7

        # Запускаем алгоритм
        """

        from langchain.llms import OpenAI
        from langchain.docstore.document import Document
        import requests
        from langchain.embeddings.openai import OpenAIEmbeddings
        from langchain.vectorstores import Chroma
        from langchain.text_splitter import CharacterTextSplitter, RecursiveCharacterTextSplitter, NLTKTextSplitter, \
            TokenTextSplitter
        from langchain.prompts import PromptTemplate
        import pathlib
        import subprocess
        import tempfile
        import ipywidgets as widgets
        import os
        import gspread
        from oauth2client.service_account import ServiceAccountCredentials
        import re
        # игнорирование предупреждений
        import warnings
        warnings.filterwarnings("ignore")
        import logging
        logging.getLogger("langchain.text_splitter").setLevel(logging.ERROR)
        logging.getLogger("chromadb").setLevel(logging.ERROR)
        from google.colab import output
        import os
        import openai
        import tiktoken
        import re
        import nltk
        nltk.download('punkt')

        class bcolors:
            HEADER = '\033[95m'
            OKBLUE = '\033[94m'
            OKCYAN = '\033[96m'
            OKGREEN = '\033[92m'
            WARNING = '\033[93m'
            FAIL = '\033[91m'
            ENDC = '\033[0m'
            BOLD = '\033[1m'
            UNDERLINE = '\033[4m'

        def set_key():
            password_input = widgets.Password(
                description='Введите пароль:',
                layout=widgets.Layout(width='500px'),
                style={'description_width': 'initial', 'white-space': 'pre-wrap', 'overflow': 'auto'})
            login_button = widgets.Button(description='Авторизация')
            output = widgets.Output()

            def on_button_clicked(_):
                with output:
                    openai.api_key = password_input.value
                    os.environ["OPENAI_API_KEY"] = openai.api_key
                    print(f'{bcolors.OKGREEN}{bcolors.BOLD}Ключ сохранен!{bcolors.ENDC}')
                    password_input.layout.display = 'none'
                    login_button.layout.display = 'none'

            login_button.on_click(on_button_clicked)
            display(widgets.VBox([password_input, login_button, output]))

        # def load_document_text(url: str) -> str:
        #     # Extract the document ID from the URL
        #     match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
        #     if match_ is None:
        #         raise ValueError('Invalid Google Docs URL')
        #     doc_id = match_.group(1)

        #     # Download the document as plain text
        #     response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')
        #     response.raise_for_status()
        #     text = response.text

        #     return text

        def load_document_text(file_path) -> str:
            with open(file_path, 'r') as file:
                text = file.read()
            return text

        def create_search_index(text: str, chunk_size: int, chunk_overlap: int) -> Chroma:
            return create_embedding(text, chunk_size, chunk_overlap)

        def load_prompt(url: str) -> str:
            # Extract the document ID from the URL
            match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
            if match_ is None:
                raise ValueError('Invalid Google Docs URL')
            doc_id = match_.group(1)

            # Download the document as plain text
            response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')
            response.raise_for_status()
            text = response.text
            return f'{text}'

        def create_embedding(data, chunk_size, chunk_overlap):
            def num_tokens_from_string(string: str, encoding_name: str) -> int:
                """Returns the number of tokens in a text string."""
                encoding = tiktoken.get_encoding(encoding_name)
                num_tokens = len(encoding.encode(string))
                return num_tokens

            source_chunks = []
            splitter = NLTKTextSplitter(chunk_size=chunk_size)
            # splitter = TokenTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)
            # splitter = CharacterTextSplitter(separator='\n\n', chunk_size=chunk_size, chunk_overlap=chunk_overlap)

            for chunk in splitter.split_text(data):
                source_chunks.append(Document(page_content=chunk, metadata={}))

            parts = data.split('\n\n')
            last_speeker = ""
            for part in parts:
                # print('$'+part)
                if " Менеджер: " in part:
                    last_speeker = part[:16]
                elif " Клиент: ":
                    last_speeker = part[:14]
                for i, chunk in enumerate(splitter.split_text(part)):
                    if i == 0:
                        source_chunks.append(Document(page_content=chunk, metadata={}))
                    else:
                        source_chunks.append(Document(page_content=last_speeker + chunk, metadata={}))
            # Создание индексов документа
            search_index = Chroma.from_documents(source_chunks, OpenAIEmbeddings())

            count_token = num_tokens_from_string(' '.join([x.page_content for x in source_chunks]), "cl100k_base")
            # print('\n ===========================================: ')
            # print('Количество токенов в документе :', count_token)
            # print('ЦЕНА запроса:', 0.0004*(count_token/1000), ' $')
            return search_index

        def answer(system, topic, temp=0):
            messages = [
                {"role": "system", "content": system},
                {"role": "user", "content": topic}
            ]

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0301",
                messages=messages,
                temperature=temp
            )

            return completion.choices[0].message.content

        # Функция подсчета токенов для модели эмбеддингов
        def num_tokens_from_string(string: str, encoding_name: str) -> int:
            """Returns the number of tokens in a text string."""
            encoding = tiktoken.get_encoding(encoding_name)
            num_tokens = len(encoding.encode(string))
            return num_tokens

        def num_tokens_from_messages(messages, model="gpt-3.5-turbo-0301"):
            """
            Возвращает количество токенов, используемых списком сообщений.
            """
            try:
                # Пытаемся получить кодировку для выбранной модели
                encoding = tiktoken.encoding_for_model(model)
            except KeyError:
                # Если кодировка для выбранной модели не найдена, используем кодировку "cl100k_base"
                encoding = tiktoken.get_encoding("cl100k_base")
            # Если выбранная модель это "gpt-3.5-turbo-0301"
            if model == "gpt-3.5-turbo-0301":
                # Инициализируем счетчик токенов
                num_tokens = 0
                # Проходимся по каждому сообщению в списке сообщений
                for message in messages:
                    # Каждое сообщение обрамляется токенами <im_start> и <im_end>, а также символами новой строки, всего 4 токена
                    num_tokens += 4
                    # Проходимся по каждому полю в сообщении (ключ и значение)
                    for key, value in message.items():
                        # Считаем количество токенов в значении и добавляем их в счетчик токенов
                        num_tokens += len(encoding.encode(value))
                        # Если ключ это "name", то это означает что роль (role) опущена
                        if key == "name":
                            # Роль всегда требуется и всегда занимает 1 токен, так что вычитаем 1 из счетчика
                            num_tokens += -1
                # Каждый ответ начинается с токена <im_start>assistant, так что добавляем 2 в счетчик
                num_tokens += 2
                # Возвращаем количество токенов
                return num_tokens
            else:
                # Если выбранная модель не поддерживается, генерируем исключение
                raise NotImplementedError(f"""num_tokens_from_messages() is not presently implemented for model {model}.
        See https://github.com/openai/openai-python/blob/main/chatml.md for information on how messages are converted to tokens.""")

        def insert_newlines(text: str, max_len: int = 170) -> str:
            words = text.split()
            lines = []
            current_line = ""
            for word in words:
                if len(current_line + " " + word) > max_len:
                    lines.append(current_line)
                    current_line = ""
                current_line += " " + word
            lines.append(current_line)
            return "\n".join(lines)

        def dialog():
            user = ''
            dialog = ''

            print(f'{bcolors.OKBLUE}{bcolors.BOLD}С чем связан ваш интерес к искусственному интеллекту?{bcolors.ENDC}')

            while user.lower() not in ['stop', 'exit', 'выход']:
                user = input('Клиент: ')
                if user == 'Stop': break

                dialog += '\n\n' + 'Клиент: ' + user
                add_dialog = answer(expert_prompt, user)

                dialog += '\n\n' + 'Менеджер: ' + add_dialog
                print(f'\n{bcolors.OKBLUE}{bcolors.BOLD}Менеджер:{bcolors.ENDC} {insert_newlines(add_dialog)}')
                report = answer(validation_prompt, dialog)
                answer_text = answer(action_prompt, report)

                print(f'\n{bcolors.OKGREEN}{bcolors.BOLD}Отчёт системы:\n {bcolors.ENDC}{report}')
                print(f'\n{bcolors.HEADER}{bcolors.BOLD}Менеджер: {bcolors.ENDC}{insert_newlines(answer_text)}\n\n')

            return dialog

        def get_chatgpt_ansver3(system, topic, search_index, temp=0):

            messages = [
                {"role": "system", "content": system},
                {"role": "user", "content": topic}
            ]

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0301",
                messages=messages,
                temperature=temp
            )
            print('ANSWER : \n', insert_newlines(completion.choices[0].message.content))

        def summarize_questions(dialog):
            # Применяем модель GPT-3 для суммаризации вопросов
            messages = [
                {"role": "system",
                 "content": "Ты - ассистент отдела продаж, основанный на AI. Ты умеешь профессионально суммаризировать присланные тебе диалоги менеджера и клиента. Твоя задача - суммаризировать диалог, который тебе пришел в объем не более 40 слов Если клиент представился, сохрани информацию об имени."},
                {"role": "user",
                 "content": "Суммаризируй следующий диалог менеджера по продажам и клиента: " + " ".join(dialog)}
            ]

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0301",
                messages=messages,
                temperature=0.3,  # Используем более низкую температуру для более определенной суммаризации
                max_tokens=100  # Ограничиваем количество токенов для суммаризации
            )

            return completion.choices[0].message.content

        def answer_user_question(system_doc_text: str, knowledge_base_url: str, topic: str,
                                 instructions: str, temperature: float, verbose: int, k: int, chunk_size: int,
                                 chunk_overlap: int) -> str:

            # system_doc_text = load_document_text(system_doc_url)
            knowledge_base_text = load_document_text(knowledge_base_url)

            # Создаем индексы поиска
            knowledge_base_index = create_search_index(knowledge_base_text, chunk_size, chunk_overlap)
            # Извлечение наиболее похожих отрезков текста из базы знаний и получение ответа модели
            answer_text = answer_index(system_doc_text, topic, instructions, knowledge_base_index, temp=temperature,
                                       verbose=verbose, k=k)

            return answer_text

        def answer_index(system, topic, instructions, search_index, temp=0, verbose=0, k=5):

            # Selecting documents similar to the question
            # docs = search_index.similarity_search(topic, k=k)
            docs = search_index.similarity_search_with_score(topic, k=k)
            if verbose: print('===========================================')
            message_content = re.sub(r'\n{2}', ' ', '\n '.join(
                [f'Отрывок текста №{i + 1}\n=====================\n' + doc[0].page_content + '\n' for i, doc in
                 enumerate(docs)]))
            if verbose: print('message_content:\n ========================================\n',
                              re.sub(r'\n{2}', ' ', '\n '.join([
                                                                   f'\nОтрывок текста №{i + 1} Оценка схожести: {doc[1]}\n=====================\n' +
                                                                   doc[0].page_content + '\n' for i, doc in
                                                                   enumerate(docs)])))

            messages = [
                {"role": "system", "content": system},
                {"role": "user", "content": f"{instructions}\n\nТексты для анализа:\n{message_content}"}
            ]

            if verbose: print('===========================================')
            if verbose: print(
                f"{num_tokens_from_messages(messages, 'gpt-3.5-turbo-0301')} tokens used for the question")

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0301",
                messages=messages,
                temperature=temp
            )

            if verbose: print('\n ===========================================')
            if verbose: print(f'{completion["usage"]["total_tokens"]} total tokens used (question-answer).')
            if verbose: print('===========================================')
            answer = completion.choices[0].message.content
            return answer  # возвращает ответ вместо его вывода

        def answer_user_question_from_answer(system_doc_text: str, instructions: str, answers: str, temperature: float,
                                             verbose: int) -> str:

            # Извлечение наиболее похожих отрезков текста из базы знаний и получение ответа модели
            answer_text = answer_index_from_answer(system_doc_text, instructions, answers, temp=temperature,
                                                   verbose=verbose)

            return answer_text

        def answer_index_from_answer(system, instructions, answers_content, temp=0, verbose=0):

            if verbose: print('===========================================')
            if verbose: print(f'Результаты анализа:\n{answers_content}')
            messages = [
                {"role": "system", "content": system},
                {"role": "user", "content": f"{instructions}\n\nРезультаты анализа:\n{answers_content}"}
            ]

            if verbose: print('===========================================\n')
            if verbose: print(
                f"{num_tokens_from_messages(messages, 'gpt-3.5-turbo-0301')} tokens used for the question")

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0301",
                messages=messages,
                temperature=temp
            )

            if verbose: print('\n ===========================================')
            if verbose: print(f'{completion["usage"]["total_tokens"]} total tokens used (question-answer).')
            if verbose: print('===========================================')
            answer = completion.choices[0].message.content
            return answer  # возвращает ответ вместо его вывода

        from IPython.display import HTML, display

        # Функция переноса теста в output ячейках
        def set_css():
            display(HTML('''
          <style>
            pre {
                white-space: pre-wrap;
            }
          </style>
          '''))

        get_ipython().events.register('pre_run_cell', set_css)

        """# Запускаем GPT"""

        # Запускаем ячейку, вводим свой ключ авторизации
        set_key()

        """##Запуск диалога"""

        # @title Диалог
        folder_url_yadisk = "https://disk.yandex.ru/d/rqn25YxUwjEymw"  # @param {type:"string"}
        optional_folder_url_yadisk2 = ""  # @param {type:"string"}
        full_url = f'https://getfile.dokpub.com/yandex/get/{folder_url_yadisk}'
        if len(optional_folder_url_yadisk2):
            full_url_opt = f'https://getfile.dokpub.com/yandex/get/{optional_folder_url_yadisk2}'

        temp_dir = 'temp'

        def download_from_url(full_url, temp_dir, opt=False):
            if not os.path.exists(temp_dir):
                os.mkdir(temp_dir)

            with open("temp/tmp.txt", "w") as f:
                f.write(full_url)

            try:
                try:
                    os.remove("temp.zip")
                    if not opt:
                        !rm - R
                        '/content/Audio Record/'
                    !rm - R
                    '/content/temp/Audio Record/'
                except:
                    pass

                !wget - O
                temp.zip - i
                temp / tmp.txt
                if opt:
                    !unzip
                    '/content/temp.zip' - d
                    '/content/temp/'
                else:
                    !unzip
                    '/content/temp.zip' - d
                    '/content/'
                output.clear()
                print('Файлы успешно загружены!')
            except Exception as e:
                print("Ошибка: ", e)

        download_from_url(full_url, temp_dir, opt=False)
        if len(optional_folder_url_yadisk2):
            download_from_url(full_url_opt, temp_dir, opt=True)

        base_text_path = '/content/Audio Record'
        if len(optional_folder_url_yadisk2):
            base_opt_text_path = '/content/temp/Audio Record'
            for first_file in os.listdir(base_text_path):
                file1_path = os.path.join(base_text_path, first_file)
                for second_file in os.listdir(base_opt_text_path):
                    file2_path = os.path.join(base_opt_text_path, second_file)
                    if '_dialog_' in first_file and '_dialog_' in second_file:
                        merge_text_files(file1_path, file2_path)
                    elif '_client_' in first_file and '_client_' in second_file:
                        merge_text_files(file1_path, file2_path)
                    elif '_manager_' in first_file and '_manager_' in second_file:
                        merge_text_files(file1_path, file2_path)
            print("Текстовые файлы двух записей объеденены!")

        text_path = [os.path.join(base_text_path, file) for file in os.listdir(base_text_path) if file.endswith('.txt')]
        base = ''  # Диалог
        base1 = ''  # Client +
        base2 = ''  # Manager +

        if len(text_path) == 3:
            for i_text in text_path:
                if '_dialog_' in i_text:
                    base = i_text
                    print(i_text)
                elif '_client_' in i_text:
                    base1 = i_text
                    print(i_text)
                elif '_manager_' in i_text:
                    base2 = i_text
                    print(i_text)
        else:
            print(
                'Внимание!!! Количество текстовых файлов не соответствуют количеству равному 3 для правильной их обработки.\nПриведите их в правильный вид.')

        # @title Подсчет токенов и их соотношение в диалоге между клиентом и менджером
        num_token_dialog = num_tokens_from_string(load_document_text(base), encoding_name="cl100k_base")
        num_token_client = num_tokens_from_string(load_document_text(base1), encoding_name="cl100k_base")
        num_token_manager = num_tokens_from_string(load_document_text(base2), encoding_name="cl100k_base")
        print('Токенов в Диалог: ', num_token_dialog)
        print('Токенов в Client +: ', num_token_client)
        print('Токенов в Manager +: ', num_token_manager)
        print("Соотношение токенов Клиент/Менеджер %: ", int((num_token_client * 100) / num_token_manager), '/',
              100 - int((num_token_client * 100) / num_token_manager))

        """###Пометки

        **content** - *это выбор из какой базы будет использоваться текст для анализа*

        **temperature** - *это значение чем меньше (ближе, либо равно нулю) чем точнее к контексту, чем ближе к 1 тем больше фантазии*

        **num_fragment** - *это количество отрезков документа которые отбираются по ключевым фразам и передаются в модель для анализа (сейчас 5 так как при нынешней нарезке влезает в модель по количеству токенов в среднем около 3000, но может варьироваться)*

        **system_prompt** - это роль модели и какие то глобальные установки

        **instructions** - *это описание задачи что нужно сделать над отобранным контекстом по ключевым фразам*

        **topicphrase** - *это ключевые слова для отбора отрывков текста в нужном смысле для анализа*

        #B2B или B2C
        """

        # @title 1. B2B или B2C
        content = 'Client +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 200  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 30  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """B2C = продажа клиенту физическому лицу, который хочет учиться для себя или сделать проект для себя. B2B = продажа физическому или юридическому лицу, который хочет сдать проект для компании. В процентном соотношении выведи. как ты считаешь, этот диалог больше b2b или b2c? Порядок отчета: "b2b: % вероятности что это b2b", "b2c: % вероятности, что это b2c","почему это b2b или b2c"."""  # @param {type:"string"}
        topicphrase = 'проект, себя, развиваться, создать'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 0, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        """#B2C

        ##Включенность менеджера в диалог с клиентом
        """

        # @title Вопросы менеджера
        content = 'Manager +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 200  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 24  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Какие открытые вопросы задавал менеджер? Важно, чтобы это был именно вопрос, а не констатация факта. Порядок отчета: "Вопрос, который задал менеджер","Время отрезка, в котором менеджер это говорил (Например: "23:19")","Общая оценка качества заданных вопросов: 100% если вопросы помогли узнать лучше потребности клиента, 0% если вопросов было мало или они не вели к пониманию клиента".. Дублирующиеся  вопросы - не включай в отчет. То, что не является вопросом - не включай в отчет. Не пиши в отчете “отрывок текста №..”  Если вопрос повторяется - не включай его в отчет."""  # @param {type:"string"}
        topicphrase = 'когда, ?, как вам?, хотите? слышали?, знаете?, какой, какая, что, почему, зачем,куда, откуда, чей, кто, ?, где, чем, сколько'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title 1. Что важно для клиента?
        content = 'Client +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 336  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 15  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Исходя из ответов клиента скажи, какие свои потребности назвал клиент?   Порядок отчета: “номер”, “потребность клиента, которую тот сказал”, “Пояснение, почему ты считаешь, что эта потребность есть у клиента”. Дублирующиеся или невысказанные потребности - не включай в отчет. То, что не является потребностью - не включай в отчет. Не пиши в отчете “отрывок текста №..”    Это список потребностей для примера, с пояснением, что таковое значит: трудоустройство (клиент хочет трудоустроиться профессии разработчика), высокая зарплата (Клиент хочет увеличить свой доход), удаленный формат работы (клиенту важно, чтобы работы была удаленная), развитие (клиенту нравится развиваться как профессионально, так и личностно), смена деятельности (клиенту хочется заниматься чем-то новым) , рост карьеры (клиент хочет развиваться в карьере), создание проекта (хочет создать проект в компании или для себя), улучшение работы в текущей кампании (чет стать более квалифицированным сотрудником для компании в которой уже работает) , прибыль от проекта (хочет создать проект и заработать на его продаже), фрилансер (хочет работать сам на себя, как разработчик) ."""  # @param {type:"string"}
        topicphrase = 'трудоустройство, высокая зарплата, удаленный формат работы, развитие, смена деятельности, рост карьеры, создание проекта, работа в текущей компании'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        """
        ##Реакция на важные для клиента нюансы"""

        # @title Трудоустройство
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 608  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Что сказано в тексте о трудоустройстве? Порядок отчета: "краткое описание, как говорилось о трудоустройстве?",”цитаты описания о заплате”, ”Время, указанное в отрезке текста,  в котором было описание, если оно указывалось в отрывке (Например: 23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет". Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'трудоустройство, работа, зарплата, устроиться'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Заработная плата
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 616  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Что сказано в тексте о заработной плате? Порядок отчета: "краткое описание, как говорилось о зарплате и доходе?",”цитаты описания о заплате”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'высокая зарплата, опата труда , работа, зарплата, доход, деньги'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Удаленный формат работы
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 560  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Что сказано в тексте об удаленном формате работы? Порядок отчета: "краткое описание, как говорилось об удаленном формате работы?",”цитаты описания об удаленном формате работы”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'удаленка. удаленная профессия, удаленный формат работы, удаленный график'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Личностный рост
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 424  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Развитие = клиенту хочется развиваться как личности. Что сказано в тексте о возможностях развития? Порядок отчета: "краткое описание, как говорилось о возможностях развития?",”цитаты описания о возможностях развития”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'развитие, личный рост, развиваться, становиться лучше'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Развитие в сфере IT
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 424  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Развитие = клиенту хочется развиваться профессионально в области программирования и разработки. Что сказано в тексте о возможностях развития? Порядок отчета: "краткое описание, как говорилось о возможностях развития?",”цитаты описания о возможностях развития”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'развитие как айти специалиста, улучшение навыков программирования или разработки, улучшеие мастерства'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Желание сменить сферу деятельности
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 672  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Что сказано в тексте о смене деятельности? Порядок отчета: "краткое описание, как говорилось о смене деятельности?",”цитаты описания о смене деятельности”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'смена профессии, смена деятельности, разнообразие в работе'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Интерес к ИИ, как хобби и соревнования
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 592  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Хобби = клиенту интересно как это работает, он хочет изучить нейронные сети, потому что ему любопытно и интересно это делать, хочет участвовать в хакатонах, стажировках. .Что сказано в тексте о хобби? Порядок отчета: "краткое описание, как говорилось о хобби?",”цитаты описания о смене деятельности”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'хобби, творчество, участие в хакатонах, участие в стажировках, интересно, любыпытно, необычно, здорово'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Продвижение по карьерной лестнице
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 536  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Что сказано в тексте о развитии карьеры? Порядок отчета: "краткое описание, как говорилось о развитии карьеры?",”цитаты описания о развитии карьеры”, ”Время, указанное в отрезке текста,  в котором было описание (23:19)”,"Общая оценка качества описания: 100% - описание отличное, 0% - плохое описание или его нет".Отчет должен быть один и объединять все результаты."""  # @param {type:"string"}
        topicphrase = 'карьерный рост, продвижение по службе, повышение'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Создание проекта
        content = 'Диалог'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 624  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 5  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. . Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Какие качества компании и обучения были названы менеджером? Строгий порядок отчета: " краткое название качества компании и обучения ", “цитата - как менеджер называл качества компании и обучения ”,"время, когда оно было сказано(23:19)","Общая оценка качества названных качества компании и обучения : 100% - описание отличное, 0% - плохое или их нет". Исключи из отчета  “отрывок текста № ”, Исключи из отчета качества компании и обучения , которые повторяются, Исключи из отчета качества компании и обучения , которые не были названы, не упоминались.  Качества компании и обучения , для примера (не включать преимущество из примера преимуществ в отчет, если его не было в текстах) : 1 Куратор, который отвечает на вопросы, 2 Получение Диплома, после окончания обучения, 3 Куратор по дипломному проекту, 4 Гарантия трудоустройства, 5 Стажировка после обучения, 6 Консультация персонального куратора. 7 Тренировки на тестовых заданиях, 8 Дополнительные учебные материалы, 9 Курсы на английском, 10 Сертификат на английском, 11 Трудоустройство в США, 12 Большой опыт компании в области искусственного интеллекта, 13 Специализированные на нейронных сетях, 14 Обучение в своем темпе в удобное время, 15 Своя демо панель нейросетей, 16 Выкуп стоимости обучения, 17 Большое количество уроков, 18 сотрудничество с МГУ и РАН (российской академией наук), 19 Удобная платформа для обучения, 20 прием на работу в наш же униврситет наших же выпускников. """  # @param {type:"string"}
        topicphrase = 'куратор, диплом, гарантия,  трудоустройство, стажировка, тренировки, материалы, английском, США, опытная компания, обучение в удобном темпе, удобное время, панель нейросетей, выкуп стоимости, специализированные на нейронных сетях, МГУ, РАН, сотрудничество, сами делаем проекты, удобная платформа обучения'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        """##Демонстрации и пояснения по запросу клиента"""

        # @title Озвученные качества обучения и компании
        content = 'Manager +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 328  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 14  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. . Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Демонтрировал ли менеджер примеры других выпускников? Как он это сделал? Информация нужна только о выпускниках и примерах других обучающихся. Строгий порядок отчета: “ответ на вопрос кратко”,"время, когда оно было сказано(23:19)".  Исключи из отчета  “отрывок текста № ”, """  # @param {type:"string"}
        topicphrase = 'Пример, выпускники, ученики, разработчики'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        # @title Демонстрация примеров выпускников и обучающихся в Гарант
        content = 'Manager +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 968  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 7  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. . Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Демонтрировал ли менеджер примеры других выпускников? Как он это сделал? Информация нужна только о выпускниках и примерах других обучающихся. Строгий порядок отчета: “ответ на вопрос кратко”,"время, когда оно было сказано(23:19)".  Исключи из отчета  “отрывок текста № ”, """  # @param {type:"string"}
        topicphrase = 'Пример, выпускники, ученики, разработчики'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)

        """##Отчеты

        ###Отчет понимание клиента
        """

        # @title Понимание клиента ч.1
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям."  # @param {type:"string"}
        instructions = "Проанализируй результаты анализа предыдущих выводов по диалогу и дай общий вывод по ним: Что менеджер делала хорошо, что менеджер делал плохо. Какие рекомендации можешь дать менеджеру для улучшения навыков? Какие рекомендации можно дать менеджеру для увеличения общения с клиентом?  Сделай вывод по эффективности в продажах менеджера на основании этого.Напиши % качества общения менеджера.  Общая оценка качества общения менеджера: 100% -  отличное, 0% - плохое или их нет"  # @param {type:"string"}
        answer_1 = """Вопросы заданные менеджером: 1. "Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 00:00 - 100% 2. "Все супер-супер, скажите, пожалуйста, Михаил, про наш университет что-то слышали? Читали? Может, прибыли уже на наших вебинарах?" - 05:35 - 100% 3. "Как она будет приходить, для начала познакомимся, расскажите о себе, как у вас с целью задач, что хотите узнать? Расскажу о нашем университете, чем мы можем быть для вас полезны." - 00:00 - 100% 4. "А в целом чем занимаетесь?" - 09:59 - 100% 5. "Насколько вам комфортно? Сколько вы могли бы выделять на обучение?" - 23:07 - 100% 6. "В целом, насколько вам интересно, хотелось бы может в каких-то проектах поучаствовать?" - 18:25 - 100% 7. "Программу тогда скину, договор оферта формируется и я. Вам тогда еще скину список документов, которые мне нужны для оформления договора. Скажите, пожалуйста, с какой даты хотели бы начать обучение?" - 27:59 - 100% 8. "Сориентирую вас по дальнейшим действиям. Также отвечу на все ваши вопросы, поэтому спрашивайте! Не стесняйтесь, чтобы у нас сегодня был с вами конструктивный диалог, договорились?" - 00:13 - 100% 9. "Скажите, пожалуйста, а ранее опыт программирования был у вас? Знакомы, мы что-то уже изучали, смотрели." - 03:42 - 100% 10. "То есть мы обучаем всем технологиям, которые есть сейчас на рынке, то есть исходя из того, что вам интересно, что бы вы хотели узнать в эту сторону, как бы мы идем?" - 00:00 - 100% 11. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит?" - 00:00 - 100% 12. "Как она будет приходить, для начала познакомимся, расскажите о себе, как у вас с целью задач, что хотите узнать? Расскажу о нашем университете, чем мы можем быть для вас полезны. Интересно ли вам развиваться в этой сфере?" - 00:00 - 100% 13. "Все хорошо, так и еще какие-нибудь ко мне вопросы остались, все ли понятно?" - 39:18 - 100% 14. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 27:59 - 100% 15. "Все супер-супер, скажите, пожалуйста, Михаил, про наш университет что-то слышали? Читали? Может, прибыли уже на наших вебинарах?" - 05:35 - 100% 16. "Программу тогда скину, договор оферта формируется и я. Вам тогда еще скину список документов, которые мне нужны для оформления договора. Скажите, пожалуйста, с какой даты хотели бы начать обучение?" - 37:31 - 100% 17. "Скажите, пожалуйста, а ранее опыт программирования был у вас? Знакомы, мы что-то уже изучали, смотрели." - 03:50 - 100% 18. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 27:59 - 100% 19. "Скажите, п"""  # @param {type:"string"}
        answer_2 = """Потребности клиента:  1. Фрилансер - клиент занимается фрилансом и хочет развиваться в этой сфере. 2. Развитие - клиент хочет развиваться в IT-сфере и изучать новые технологии. 3. Создание проекта - клиент хочет создать проект для себя или для компании. 4. Работа - клиент хочет работать в IT-сфере и развиваться в карьере."""  # @param {type:"string"}
        answer_3 = """Краткое описание, как говорилось о трудоустройстве: Краткое описание, как говорилось о трудоустройстве: компания гарантирует трудоустройство по договору, начальная ставка от 70 тысяч рублей, есть возможность стажировки на реальных проектах.  Цитаты описания о заплате: "ставка начинается от семьдесят тысяч рублей", "если вы как новичок, вы можете брать меньше чек".  Время, указанное в отрезке текста, в котором было описание: отрывок текста №1 и №2 не содержат временных меток, отрывок текста №3 - 11:15, отрывок текста №4 - 11:15.  Общая оценка качества описания: 80%. Описание содержит информацию о начальной ставке и возможности трудоустройства, но не дает полной картины о том, какие бонусы и преимущества предлагает компания."""  # @param {type:"string"}
        answer_4 = """В текстах есть упоминания о зарплате и доходе. В отрывке текста №1 менеджер говорит о высоких зарплатах на рынке и о том, что специалисты в компании Антинори получают больше всего, включая жен. В отрывке текста №3 менеджер просит указать зарплату от 120-130 тысяч рублей. В отрывке текста №4 менеджер говорит о зарплате в 3500 рублей за нейронку в среднем, но цены могут быть выше в крупных компаниях. Общая оценка качества описания - 80%, так как в текстах есть информация о зарплате, но она не всегда полная и точная. Время, указанное в отрезке текста с описанием зарплаты - 11:15 (отрывок текста №1)."""  # @param {type:"string"}
        answer_5 = """Краткое описание, как говорилось о возможностях развития:  В текстах было упомянуто несколько возможностей развития, таких как программа-стажировка на реальных проектах, гарантированное трудоустройство по договору, участие в хакатонах и постоянное обновление контента.  Цитаты описания о возможностях развития: - "это обучение сразу на реальных проектах, чтобы вы понимали, как это можно использовать, допустим, для индивидуальной вашей компании" (отрывок №1) - "кто хочет развиваться в этой сфере? То есть мы гарантируем по договору трудоустройства. И есть возможность" (отрывок №1) - "такие соревнования для разработчиков. Как показатель качества образования, который мы предоставляем, также мы являемся. Резидентами Сколково" (отрывок №2) - "мы контент постоянно обновляем" (отрывок №4 и №5)  Время, указанное в отрезке текста, в котором было описание: 06:48 в отрывке №3.  Общая оценка качества описания: 80%. Описания достаточно ясные и содержат конкретные примеры, однако не все возможности развития были упомянуты в текстах."""  # @param {type:"string"}
        answer_6 = ""  # @param {type:"string"}
        answer_7 = ""  # @param {type:"string"}
        answer_8 = ""  # @param {type:"string"}
        answer_9 = ""  # @param {type:"string"}
        answer_10 = ""  # @param {type:"string"}
        answer_11 = ""  # @param {type:"string"}

        answers = " ".join([f"Анализ №{i + 1}. {q}\n" for i, q in enumerate([answer_1, answer_2, answer_3, answer_4,
                                                                             answer_5, answer_6, answer_7, answer_8,
                                                                             answer_9, answer_10, answer_11]) if
                            len(q)])

        output1 = answer_user_question_from_answer(system_prompt, instructions, answers,
                                                   temperature, 1)

        print("\nОтвет:\n", output1)

        # @title Понимание клиента ч.2
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям."  # @param {type:"string"}
        instructions = "Проанализируй результаты анализа предыдущих выводов по диалогу и дай общий вывод по ним: Что менеджер делала хорошо, что менеджер делал плохо. Какие рекомендации можешь дать менеджеру для улучшения навыков? Какие рекомендации можно дать менеджеру для увеличения общения с клиентом?  Сделай вывод по эффективности в продажах менеджера на основании этого.Напиши % качества общения менеджера.  Общая оценка качества общения менеджера: 100% -  отличное, 0% - плохое или их нет"  # @param {type:"string"}
        answer_1 = """ Краткое описание, как говорилось о возможностях развития:  В текстах упоминается, что клиенты хотят развиваться как личности и повышать свои компетенции. Менеджер упоминает, что студенты компании - это взрослые люди, которые уже имеют профессию, но решили развиваться и повышать свои компетенции. Также упоминается, что компания гарантирует первый заказ и помогает в трудоустройстве.  Цитаты описания о возможностях развития: - "Клиент: Поэтому как бы? Это было бы интересно не только для работы, чисто для собственного развития для себя." - "Менеджер: ...это люди, которые уже имеют профессию, но решили повысить свои компетенции и развиваться соответственно в эту серию." - "Все, зависит, конечно, от вашей компетенции и желания развиваться." - "Менеджер: Сейчас вы хотите с этим ознакомиться повысить свои компетенции, то есть применение? И также применение в собственной работе все верно."  Время, указанное в отрезке текста, в котором было описание: 10:51, 11:15, 04:28.  Общая оценка качества описания: 80% - описание хорошее, но не полное. В текстах упоминается желание клиентов развиваться и повышать свои компетенции, но не описывается конкретно, какие возможности для этого предоставляет компания. Также не упоминается, какие программы обучения и курсы предлагает компания для развития клиентов."""  # @param {type:"string"}
        answer_2 = """Краткое описание, как говорилось о смене деятельности:  Менеджер говорил о том, что профессии будут уходить, и важно начать ознакамливаться с новыми технологиями, чтобы быть квалифицированным специалистом еще не одно десятилетие. Он также упоминал о том, что смена профессии или проекты на заказ являются основным запросом, и работа с нейронными сетями - это творческая профессия.  Цитаты описания о смене деятельности: - "Девяносто процентов профессия будет уходить потому, что сейчас уже есть технологии, которые позволяют, допустим, использовать перевод." - "Допустим, тот же самый чат пять это продажники нейропод, нейромаркетологи, которые позволяют вам генерировать контент." - "Уже начать сейчас ознакамливаться всеми этими технологиями, если вы хотите быть квалифицированным специалистом еще не одно десятилетие." - "Судя которые приходят, это либо смена профессии, либо проекты на заказ, как в фрилансере." - "Ну и плюсом все-таки работать с нейронными сетями это не только разработкой. Код это не только математика, это еще очень творческая профессия."  Время, указанное в отрезке текста, в котором было описание: 06:48 (отрывок текста №3), 13:01 (отрывок текста №4 и №5).  Общая оценка качества описания: 80% - описание содержит информацию о том, что профессии будут уходить и важно ознакомиться с новыми технологиями, но не содержит конкретных примеров этих технологий. Также описание упоминает о смене профессии и проектах на заказ, но не дает подробной информации о причинах этого."""  # @param {type:"string"}
        answer_3 = """Краткое описание, как говорилось о развитии карьеры:  В текстах упоминается возможность развития карьеры через стажировку, работу над реальными проектами, получение первого заказа, содействие в трудоустройстве и работу с крупными компаниями-партнерами.  Цитаты описания о развитии карьеры:  - "Для Мартисова то, что вы можете использовать" (отрывок текста №1) - "Ты Рот-то реальные проекты. Которые привлечены нашей компании" (отрывок текста №2) - "Мы содействуем вам в договоре, что мы вам гарантируем первый заказ" (отрывок текста №3) - "Если вам не интересно, прям трудоустройство, как вакансия. То мы содействуем в первом поиске проекта на" (отрывок текста №4) - "Все, зависит, конечно, от вашей компетенции и желания развиваться. Потому что, если есть желание, возможно, всегда найдется" (отрывок текста №5)  Время, указанное в отрезке текста, в котором было описание (23:19): не указано.  Общая оценка качества описания: 80% - описание содержит информацию о возможностях развития карьеры, но не всегда ясно, как именно это происходит."""  # @param {type:"string"}
        answer_4 = """Краткое описание, как говорилось о хобби: Клиент интересуется изучением нейронных сетей, так как ему это любопытно и интересно, и он хочет участвовать в хакатонах и стажировках.  Цитаты описания о смене деятельности:  - "А те люди, которые приходят с нуля, абсолютно из других сфер. И в том числе эти чары и таргетологи, аркетолог, массажисты. Даже нас ветеринары были, которые пришли." (отрывок текста №1) - "Поэтому у нас, как я ранее говорила, очень гибкая программа, и она подстраивается под ваш уровень. То есть у нас самые юные наши студентки, девочка двенадцать лет, то есть там уровне математики седьмой класс." (отрывок текста №5)  Время, указанное в отрезке текста, в котором было описание: 23:19 (отрывок текста №5)  Общая оценка качества описания: 100% - описание отличное. Клиент ясно и четко выразил свой интерес к изучению нейронных сетей и участию в хакатонах и стажировках."""  # @param {type:"string"}
        answer_5 = """В текстах о проекте говорится, что компания предлагает обучение программированию на python и нейронным сетям, а также продажу проектов на заказ. В отрывках текста №1, №2 и №5 говорится о том, что студенты могут выбрать тему своего дипломного проекта, а также получают сопровождение на каждом этапе работы над проектом. В отрывке текста №3 говорится о том, что компания предлагает курсы по продаже проектов на заказ, а также описывается суть проектов, которые уже реализованы. В отрывке текста №4 говорится о том, что компания проводит стажировки, в рамках которых студентам предоставляется тема проекта, который нужно реализовать за три месяца.   Цитаты описания проекта: - "Начиная с темы дипломного проекта, вы можете выбрать свою тему" (отрывок текста №1) - "В рамках стажировки нужно выполнить анализ приверженности сотрудников" (отрывок текста №4) - "По факту это для проекта магазин без продавца, чтобы вы пришли. Взяли товар. СПС вашей вышли с вашей как бы? Карточки списали деньги с по биометрическим данным?" (отрывок текста №5)  Время, указанное в отрезке текста, в котором было описание: 27:59 (отрывок текста №1)  Общая оценка качества описания: 80%. Описания проектов присутствуют в нескольких отрывках текста, но они не всегда четко структурированы и могут быть непонятными для человека, не знакомого с темой."""  # @param {type:"string"}
        answer_6 = ""  # @param {type:"string"}
        answer_7 = ""  # @param {type:"string"}
        answer_8 = ""  # @param {type:"string"}
        answer_9 = ""  # @param {type:"string"}
        answer_10 = ""  # @param {type:"string"}
        answer_11 = ""  # @param {type:"string"}

        answers = " ".join([f"Анализ №{i + 1}. {q}\n" for i, q in enumerate([answer_1, answer_2, answer_3, answer_4,
                                                                             answer_5, answer_6, answer_7, answer_8,
                                                                             answer_9, answer_10, answer_11]) if
                            len(q)])

        output1 = answer_user_question_from_answer(system_prompt, instructions, answers,
                                                   temperature, 1)

        print("\nОтвет:\n", output1)

        # @title Понимание клиента. Общий вывод.
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям."  # @param {type:"string"}
        instructions = "Проанализируй результаты анализа предыдущих выводов по диалогу и дай подробный вывод по ним: Что менеджер делала хорошо, что менеджер делал плохо. Какие рекомендации можешь дать менеджеру для улучшения навыков общения? Напиши % качества общения менеджера: Общая оценка качества общения менеджера: 100% -  отличное, 0% - плохое или их нет"  # @param {type:"string"}
        answer_1 = """общий вывод: менеджер хорошо задавал вопросы, проявлял интерес к клиенту и предлагал ему различные возможности развития. Однако, описание о трудоустройстве и зарплате было не полным и точным. Рекомендации для улучшения навыков: более детально описывать возможности трудоустройства и бонусы компании, уточнять информацию о зарплате и доходе. Рекомендации для увеличения общения с клиентом: продолжать задавать вопросы, проявлять интерес к клиенту и предлагать ему различные возможности развития. Эффективность в продажах менеджера можно оценить как высокую, так как он проявлял активность в общении с клиентом и предлагал ему различные возможности развития. Оценка качества общения менеджера - 100%."""  # @param {type:"string"}
        answer_2 = """Общий вывод: менеджер хорошо описывает возможности развития карьеры и смены профессии, но не всегда дает конкретные примеры и не описывает полностью возможности компании. Также менеджер не всегда структурирует описание проектов и может быть непонятным для клиента. Рекомендации для улучшения навыков: более полное описание возможностей компании, конкретные примеры технологий и проектов, более структурированное описание проектов. Рекомендации для увеличения общения с клиентом: задавать больше вопросов, чтобы лучше понимать потребности клиента, более четко структурировать описание, использовать более простой язык при описании технических вопросов. Эффективность в продажах менеджера на основании этого анализа не может быть оценена, так как анализ проводился только по качеству общения. Общая оценка качества общения менеджера: 80%."""  # @param {type:"string"}
        answer_3 = """Вопросы заданные менедером: 1. "Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 00:00 - 100% 2. "Все супер-супер, скажите, пожалуйста, Михаил, про наш университет что-то слышали? Читали? Может, прибыли уже на наших вебинарах?" - 05:35 - 100% 3. "Как она будет приходить, для начала познакомимся, расскажите о себе, как у вас с целью задач, что хотите узнать? Расскажу о нашем университете, чем мы можем быть для вас полезны." - 00:00 - 100% 4. "А в целом чем занимаетесь?" - 09:59 - 100% 5. "Насколько вам комфортно? Сколько вы могли бы выделять на обучение?" - 23:07 - 100% 6. "В целом, насколько вам интересно, хотелось бы может в каких-то проектах поучаствовать?" - 18:25 - 100% 7. "Программу тогда скину, договор оферта формируется и я. Вам тогда еще скину список документов, которые мне нужны для оформления договора. Скажите, пожалуйста, с какой даты хотели бы начать обучение?" - 27:59 - 100% 8. "Сориентирую вас по дальнейшим действиям. Также отвечу на все ваши вопросы, поэтому спрашивайте! Не стесняйтесь, чтобы у нас сегодня был с вами конструктивный диалог, договорились?" - 00:13 - 100% 9. "Скажите, пожалуйста, а ранее опыт программирования был у вас? Знакомы, мы что-то уже изучали, смотрели." - 03:42 - 100% 10. "То есть мы обучаем всем технологиям, которые есть сейчас на рынке, то есть исходя из того, что вам интересно, что бы вы хотели узнать в эту сторону, как бы мы идем?" - 00:00 - 100% 11. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит?" - 00:00 - 100% 12. "Как она будет приходить, для начала познакомимся, расскажите о себе, как у вас с целью задач, что хотите узнать? Расскажу о нашем университете, чем мы можем быть для вас полезны. Интересно ли вам развиваться в этой сфере?" - 00:00 - 100% 13. "Все хорошо, так и еще какие-нибудь ко мне вопросы остались, все ли понятно?" - 39:18 - 100% 14. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 27:59 - 100% 15. "Все супер-супер, скажите, пожалуйста, Михаил, про наш университет что-то слышали? Читали? Может, прибыли уже на наших вебинарах?" - 05:35 - 100% 16. "Программу тогда скину, договор оферта формируется и я. Вам тогда еще скину список документов, которые мне нужны для оформления договора. Скажите, пожалуйста, с какой даты хотели бы начать обучение?" - 37:31 - 100% 17. "Скажите, пожалуйста, а ранее опыт программирования был у вас? Знакомы, мы что-то уже изучали, смотрели." - 03:50 - 100% 18. "Проект рассказал про формат тоже в целом рассказала. Скажите, пожалуйста, есть какие-то вопросы, все ли вам понятно, насколько вам это подходит? Интересно ли вам развиваться в этой сфере?" - 27:59 - 100%"""  # @param {type:"string"}

        answers = " ".join([f"Анализ №{i + 1}. {q}\n" for i, q in enumerate([answer_1, answer_2, answer_3]) if len(q)])

        output1 = answer_user_question_from_answer(system_prompt, instructions, answers,
                                                   temperature, 1)

        print("\nОтвет:\n", output1)

        """###Демонстрации"""

        # @title Отчет по демонстрации качеств компании и обучения
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям."  # @param {type:"string"}
        instructions = "Проанализируй результаты анализа предыдущих выводов по диалогу и дай общий вывод по ним: Что менеджер делала хорошо, что менеджер делал плохо. Какие рекомендации можешь дать менеджеру для улучшения навыков? Проанализируй результаты анализа о том на сколько качественно менеджер демонстрировал качества компании. Сделай вывод по качеству общения менеджера на основании этого.Напиши % качества общения менеджера. Соотносились ли сказанные качества компании с потребностями клиента? Общая оценка качества общения менеджера: 100% -  отличное, 0% - плохое или их нет"  # @param {type:"string"}
        answer_1 = """Качества компании и обучения, названные менеджером: 1. Гарантия трудоустройства - "И также кому интересно трудоустройство, кто хочет развиваться в этой сфере? То есть мы гарантируем по договору трудоустройства." (06:48) 2. Консультация по дипломному проекту - "Консультация по дипломному проекту тут семь месяцев, поддержка куратора идет." (32:15) 3. Специализированные на нейронных сетях - "Мы занимаемся только искуственным интеллектом, только нейронными сетями. Соответственно, обучаем тоже в этой сфере." (04:19) 4. Сотрудничество с МГУ и РАН (российской академией наук) - "Наши студенты также после заказов у нас более сто двадцать пять компаний-партнеров, на сегодняшний день, с которыми мы сотрудничаем, в том числе Российская академия наук." (13:01, 07:00) 5. Удобная платформа для обучения - "Есть такой сайт. Сити мозгов." (13:01, 10:00) 6. Выкуп стоимости обучения - "Мы содействуем вам в договоре, что мы вам гарантируем первый заказ." (13:01, 11:00)  Общая оценка качества названных качества компании и обучения: 100% - отличное качество. Компания предоставляет гарантию трудоустройства, консультацию по дипломному проекту, специализируется на нейронных сетях, сотрудничает с МГУ и РАН, предоставляет удобную платформу для обучения и выкуп стоимости обучения."""  # @param {type:"string"}
        answer_2 = """Потребности клиента:  1. Фрилансер - клиент занимается фрилансом и хочет развиваться в этой сфере. 2. Развитие - клиент хочет развиваться в IT-сфере и изучать новые технологии. 3. Создание проекта - клиент хочет создать проект для себя или для компании. 4. Работа - клиент хочет работать в IT-сфере и развиваться в карьере."""  # @param {type:"string"}
        answer_3 = """ Менеджер не демонстрировал примеры других выпускников в этих отрывках текста."""  # @param {type:"string"}
        answer_4 = ""  # @param {type:"string"}
        answer_5 = ""  # @param {type:"string"}
        answer_6 = ""  # @param {type:"string"}
        answer_7 = ""  # @param {type:"string"}
        answer_8 = ""  # @param {type:"string"}
        answer_9 = ""  # @param {type:"string"}

        answers = " ".join([f"Анализ №{i + 1}. {q}\n" for i, q in enumerate(
            [answer_1, answer_2, answer_3, answer_4, answer_5, answer_6, answer_7, answer_8, answer_9]) if len(q)])

        output1 = answer_user_question_from_answer(system_prompt, instructions, answers,
                                                   temperature, 1)

        print("\nОтвет:\n", output1)

        """###Общий отчет"""

        # @title Общий вывод chatGPT по общению менеджера и клиента
        temperature = 0.1  # @param {type: "slider", min: 0, max: 1, step:0.1}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям."  # @param {type:"string"}
        instructions = """Напиши общий % качества общения менеджера. Проанализируй результаты анализа предыдущих выводов по диалогу и дай общий вывод по ним: Что менеджер делала хорошо, что менеджер делал плохо. Какие рекомендации можешь дать менеджеру для улучшения навыков? """  # @param {type:"string"}
        answer_1 = """Общая оценка качества общения менеджера по продажам и клиента составляет 94%. Менеджер хорошо задает вопросы, проявляет интерес к клиенту и предлагает ему различные возможности развития. Однако, есть некоторые недостатки, такие как неполное описание возможностей компании, не всегда структурированное описание проектов и недостаточно конкретные примеры технологий и проектов. Рекомендации для улучшения навыков общения включают более детальное описание возможностей трудоустройства и бонусов компании, уточнение информации о зарплате и доходе, более полное описание возможностей компании, конкретные примеры технологий и проектов, более структурированное описание проектов, использование более простого языка при описании технических вопросов и задавание большего количества вопросов, чтобы лучше понимать потребности клиента. В целом, менеджер хорошо справляется с продажами, но улучшение навыков общения может помочь ему еще более эффективно работать с клиентами."""  # @param {type:"string"}
        answer_2 = """На основании результатов анализа можно сделать вывод, что менеджер хорошо представил качества компании и обучения, названные имеющиеся возможности для клиента. Однако, менеджер мог бы улучшить свои навыки, предоставляя более конкретные примеры и демонстрируя примеры других выпускников. Рекомендуется менеджеру улучшить свои навыки в этом направлении.   Качество общения менеджера можно оценить на 90%. Менеджер хорошо представил компанию и ее возможности, однако, мог бы более конкретно ответить на вопросы клиента и демонстрировать больше примеров.   Качества компании, названные менеджером, соотносятся с потребностями клиента. Компания предоставляет возможности для развития в IT-сфере, гарантирует трудоустройство, предоставляет консультации по дипломному проекту и удобную платформу для обучения.   Общая оценка качества общения менеджера: 90% - хорошее качество."""  # @param {type:"string"}
        answer_3 = ""  # @param {type:"string"}

        answers = " ".join([f"Анализ №{i + 1}. {q}\n" for i, q in enumerate([answer_1, answer_2, answer_3]) if len(q)])

        output1 = answer_user_question_from_answer(system_prompt, instructions, answers,
                                                   temperature, 1)

        print("\nОтвет:\n", output1)

        # @title Обещанные материалы
        content = 'Manager +'  # @param ['Диалог', 'Client +', 'Manager +']
        chunk_size = 424  # @param {type: "slider", min: 200, max: 1024, step:8}
        chunk_overlap = 0  # @param {type: "slider", min: 0, max: 256, step:8}
        temperature = 0  # @param {type: "slider", min: 0, max: 1, step:0.1}
        num_fragment = 10  # @param {type:"integer"}
        system_prompt = "Ты самый лучший сотрудник отдела контроля качества общения менеджера по продажам и клиента. Менеджер работает в компании, которая продает обучение программированию на python и нейронным сетям. Ты всегда очень точно следуешь порядку отчета."  # @param {type:"string"}
        instructions = """Какие материалы менеджер хотел отправит клиенту после общения?"""  # @param {type:"string"}
        topicphrase = 'отправлю, вышлю, вы получите, почитаете, посмотрите, попробуете'  # @param {type:"string"}

        if content == 'Диалог':
            content_base = base
        elif content == 'Client +':
            content_base = base1
        elif content == 'Manager +':
            content_base = base2

        output1 = answer_user_question(system_prompt, content_base, topicphrase,
                                       instructions, temperature, 1, num_fragment,
                                       chunk_size, chunk_overlap)  # ОБЩИЙ

        print("\nОтвет:\n", output1)


if __name__ == '__main__':
    draft02_lesson().run("")